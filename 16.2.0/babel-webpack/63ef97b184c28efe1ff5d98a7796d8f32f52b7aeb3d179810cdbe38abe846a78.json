{"ast":null,"code":"var _class;\nimport { HttpParams } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuoteService {\n  constructor(http) {\n    this.http = http;\n    // set up the api url\n    this.API_URL = 'https://api.quotable.io/search/quotes';\n  }\n  searchQuotes(searchTerm) {\n    // set up the params we will be adding to the api call. \n    const params = new HttpParams().set('query', searchTerm);\n    // return the response from \n    return this.http.get(this.API_URL, {\n      params\n    }).pipe(\n    // if there is an error, send an empty object to the client\n    catchError(this.handleError('searchQuotes', {})));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  }\n}\n_class = QuoteService;\n_class.ɵfac = function QuoteService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpParams","of","catchError","QuoteService","constructor","http","API_URL","searchQuotes","searchTerm","params","set","get","pipe","handleError","operation","result","error","console","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/nickgoudeau/professionalProjects/tmo-hw/tmo-app/src/app/services/quote.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { QuoteResponse } from '../models/quote.model';\n\n@Injectable({\n    providedIn: 'root'\n  })\n\nexport class QuoteService{\n    // set up the api url\n    private readonly API_URL = 'https://api.quotable.io/search/quotes';\n\n    constructor(private http: HttpClient) {};\n\n    searchQuotes(searchTerm: string): Observable<QuoteResponse>{\n        // set up the params we will be adding to the api call. \n        const params = new HttpParams().set('query', searchTerm);\n\n        // return the response from \n        return this.http.get<QuoteResponse>(this.API_URL, { params })\n        .pipe(\n            // if there is an error, send an empty object to the client\n        catchError(this.handleError<QuoteResponse>('searchQuotes', {} as QuoteResponse))\n        );\n    }\n\n    private handleError<T>(operation = 'operation', result?: T){\n        return (error: any): Observable<T> => {\n            console.error(`${operation} failed: ${error.message}`);\n            return of(result as T);\n        }\n    }\n\n}"],"mappings":";AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAQ,gBAAgB;;;AAO3C,OAAM,MAAOC,YAAY;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB;IACiB,KAAAC,OAAO,GAAG,uCAAuC;EAE3B;EAEvCC,YAAYA,CAACC,UAAkB;IAC3B;IACA,MAAMC,MAAM,GAAG,IAAIT,UAAU,EAAE,CAACU,GAAG,CAAC,OAAO,EAAEF,UAAU,CAAC;IAExD;IACA,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAgB,IAAI,CAACL,OAAO,EAAE;MAAEG;IAAM,CAAE,CAAC,CAC5DG,IAAI;IACD;IACJV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAgB,cAAc,EAAE,EAAmB,CAAC,CAAC,CAC/E;EACL;EAEQA,WAAWA,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACtD,OAAQC,KAAU,IAAmB;MACjCC,OAAO,CAACD,KAAK,CAAC,GAAGF,SAAS,YAAYE,KAAK,CAACE,OAAO,EAAE,CAAC;MACtD,OAAOjB,EAAE,CAACc,MAAW,CAAC;IAC1B,CAAC;EACL;;SAvBSZ,YAAY;;mBAAZA,MAAY,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAZnB,MAAY;EAAAoB,OAAA,EAAZpB,MAAY,CAAAqB,IAAA;EAAAC,UAAA,EAHT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}